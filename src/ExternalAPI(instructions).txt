1. O que √© uma API externa?

    √â um servi√ßo web que est√° dispon√≠vel em algum endere√ßo HTTP (uma URL).

    Voc√™ pode fazer requisi√ß√µes HTTP (GET, POST, etc.) para essa URL e receber dados ou respostas.

    Exemplo: ViaCEP tem a rota https://viacep.com.br/ws/<cep>/json/ que retorna dados do endere√ßo para um CEP.
Exemplo pr√°tico:

Voc√™ quer o endere√ßo de um CEP usando ViaCEP.

    Rota da API externa: https://viacep.com.br/ws/01001000/json/

    Na sua API, voc√™ chama essa rota e recebe o JSON com o endere√ßo.

    Exemplo de c√≥digo no seu servi√ßo:

const resposta = await firstValueFrom(
  this.httpService.get(`https://viacep.com.br/ws/${cep}/json/`),
);
console.log(resposta.data);


E como chamar essa fun√ß√£o na sua API?

    Voc√™ cria uma rota na sua API (por exemplo, GET /aluno/endereco/:cep)

    Essa rota chama o m√©todo do seu servi√ßo que consome a API externa.

    Retorna os dados para quem chamou sua API.

5. Fluxo final

[Cliente (frontend)] ---> [Sua API (NestJS)] ---> [API externa ViaCEP]
                                        <--- responde
                    <--- retorna para o cliente









üß© Suponha que voc√™ quer buscar o endere√ßo de um aluno pelo CEP que ele informou
Cen√°rio:

    O usu√°rio envia um CEP na hora de cadastrar o aluno

    Voc√™ quer consultar o ViaCEP para buscar os dados do endere√ßo

    E salvar no banco ou s√≥ usar esses dados

üîß Onde voc√™ vai colocar cada parte do c√≥digo
‚úÖ 1. Crie um servi√ßo para consumir a API externa

Arquivo: viacep.service.ts

import { HttpService } from '@nestjs/axios';
import { Injectable } from '@nestjs/common';
import { firstValueFrom } from 'rxjs';

@Injectable()
export class ViaCepService {
  constructor(private readonly httpService: HttpService) {}

  async buscarEnderecoPorCep(cep: string) {
    const url = `https://viacep.com.br/ws/${cep}/json/`;

    try {
      const resposta = await firstValueFrom(this.httpService.get(url));
      return resposta.data;
    } catch (erro) {
      throw new Error(`Erro ao buscar CEP: ${erro.message}`);
    }
  }
}

‚úÖ 2. Registre o HttpModule e o ViaCepService no m√≥dulo

Arquivo: aluno.module.ts (ou AppModule, dependendo de onde vai usar)

import { Module } from '@nestjs/common';
import { HttpModule } from '@nestjs/axios';
import { ViaCepService } from './viacep.service';
import { AlunoService } from './aluno.service';
// outros imports...

@Module({
  imports: [HttpModule],
  providers: [AlunoService, ViaCepService],
  exports: [ViaCepService],
})
export class AlunoModule {}


‚úÖ 3. Injete e use o servi√ßo no AlunoService

Arquivo: aluno.service.ts

@Injectable()
export class AlunoService {
  constructor(
    private readonly prisma: PrismaService,
    private readonly viaCepService: ViaCepService,
  ) {}

  async create(createAlunoDto: CreateAlunoDto) {
    const { nome, email, senha, cursoId, endereco, turmaId } = createAlunoDto;

    // Buscar dados de endere√ßo externo (ex: ViaCEP)
    const enderecoExterno = await this.viaCepService.buscarEnderecoPorCep(endereco.cep);

    console.log('Endere√ßo retornado pela API externa:', enderecoExterno);

    // Aqui voc√™ pode usar os dados para criar o aluno ou s√≥ validar
    // Exemplo: salvar o endere√ßo completo no banco junto com o aluno

    return await this.prisma.aluno.create({
      data: {
        nome,
        email,
        cursoId,
        endereco: {
          create: {
            cep: enderecoExterno.cep,
            rua: enderecoExterno.logradouro,
            bairro: enderecoExterno.bairro,
            cidade: enderecoExterno.localidade,
            estado: enderecoExterno.uf,
            tipo: endereco.tipo, // vindo do DTO
          },
        },
      },
      include: {
        endereco: true,
      },
    });
  }
}

üß™ Teste final
Requisi√ß√£o:

POST /alunos
{
  "nome": "Lucas",
  "email": "lucas@email.com",
  "senha": "123456",
  "cursoId": 1,
  "endereco": {
    "cep": "01001000",
    "tipo": "RESIDENCIAL"
  }
}

Resultado:

    Sua API consulta o CEP no ViaCEP

    Monta o endere√ßo completo

    Cria o aluno com esse endere√ßo

‚úÖ Recapitulando
Onde colocar	O qu√™ colocar
viacep.service.ts	L√≥gica para chamar a API externa
aluno.module.ts	Importa HttpModule e registra o servi√ßo
aluno.service.ts	Injeta e usa o servi√ßo no m√©todo create
